/* Generated By:JJTree&JavaCC: Do not edit this line. AnalisadorTokenManager.java */

/** Token Manager. */
public class AnalisadorTokenManager implements AnalisadorConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1dfffe000000L) != 0L)
         {
            jjmatchedKind = 46;
            return 2;
         }
         if ((active0 & 0x80L) != 0L)
            return 4;
         return -1;
      case 1:
         if ((active0 & 0x40000000L) != 0L)
            return 2;
         if ((active0 & 0x1dffbe000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
            return 2;
         }
         return -1;
      case 2:
         if ((active0 & 0x100008000000L) != 0L)
            return 2;
         if ((active0 & 0xdffb6000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0x182a0000000L) != 0L)
            return 2;
         if ((active0 & 0xc7d16000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
            return 2;
         }
         return -1;
      case 4:
         if ((active0 & 0x502000000L) != 0L)
            return 2;
         if ((active0 & 0xc7814000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
            return 2;
         }
         return -1;
      case 5:
         if ((active0 & 0x86804000000L) != 0L)
            return 2;
         if ((active0 & 0x41010000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
            return 2;
         }
         return -1;
      case 6:
         if ((active0 & 0x1010000000L) != 0L)
            return 2;
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 15);
      case 38:
         return jjMoveStringLiteralDfa1_1(0x2000L);
      case 40:
         return jjStopAtPos(0, 16);
      case 41:
         return jjStopAtPos(0, 17);
      case 42:
         return jjStopAtPos(0, 12);
      case 43:
         return jjStopAtPos(0, 10);
      case 44:
         return jjStopAtPos(0, 24);
      case 45:
         return jjStopAtPos(0, 11);
      case 46:
         return jjStopAtPos(0, 23);
      case 47:
         return jjMoveStringLiteralDfa1_1(0x80L);
      case 59:
         return jjStopAtPos(0, 22);
      case 60:
         return jjStopAtPos(0, 14);
      case 61:
         return jjStopAtPos(0, 41);
      case 83:
         return jjMoveStringLiteralDfa1_1(0x40004000000L);
      case 91:
         return jjStopAtPos(0, 18);
      case 93:
         return jjStopAtPos(0, 19);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x10000000L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x1080000000L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x48000000L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x80000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x100000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x220000000L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x8000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x100000000L);
      case 123:
         return jjStopAtPos(0, 20);
      case 125:
         return jjStopAtPos(0, 21);
      default :
         return jjMoveNfa_1(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x10400000000L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x182000000000L);
      case 102:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(1, 30, 2);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x120000000L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x82000000L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x8010000000L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x804000000L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x802000000L);
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x18120000000L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x40080000000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(2, 27, 2);
         return jjMoveStringLiteralDfa3_1(active0, 0x3000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000L);
      case 119:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 44, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 39, 2);
         break;
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(3, 31, 2);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(3, 33, 2);
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x4110000000L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 40, 2);
         break;
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(3, 29, 2);
         return jjMoveStringLiteralDfa4_1(active0, 0x402000000L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x40800000000L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(4, 32, 2);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(4, 34, 2);
         return jjMoveStringLiteralDfa5_1(active0, 0x40010000000L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x4800000000L);
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x1004000000L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000000L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(4, 25, 2);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_1(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000L);
      case 99:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(5, 35, 2);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 38, 2);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000L);
      case 103:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(5, 26, 2);
         break;
      case 104:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 43, 2);
         break;
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000000L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 37, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa7_1(active0, 0x40000000000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(6, 28, 2);
         break;
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 36, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa9_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa10_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa11_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa12_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0);
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa13_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(11, active0);
}
private int jjMoveStringLiteralDfa13_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa14_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(12, active0);
}
private int jjMoveStringLiteralDfa14_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa15_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(13, active0);
}
private int jjMoveStringLiteralDfa15_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa16_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(14, active0);
}
private int jjMoveStringLiteralDfa16_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(15, active0);
}
private int jjMoveStringLiteralDfa17_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(17, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_1(16, active0);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 4:
                  if (curChar == 47)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(10);
                  }
                  if (curChar == 47)
                     jjCheckNAddStates(2, 4);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 7:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar != 47)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(2);
                  break;
               case 5:
                  jjAddStates(2, 4);
                  break;
               case 10:
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 4);
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_0(0x2L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(1, 1);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   4, 9, 5, 6, 8, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, "\53", "\55", 
"\52", "\46\46", "\74", "\41", "\50", "\51", "\133", "\135", "\173", "\175", "\73", 
"\56", "\54", "\143\154\141\163\163", "\123\164\162\151\156\147", "\151\156\164", 
"\142\157\157\154\145\141\156", "\164\150\151\163", "\151\146", "\145\154\163\145", "\167\150\151\154\145", 
"\164\162\165\145", "\146\141\154\163\145", "\163\164\141\164\151\143", 
"\145\170\164\145\156\144\163", "\162\145\164\165\162\156", "\160\165\142\154\151\143", "\166\157\151\144", 
"\155\141\151\156", "\75", 
"\123\171\163\164\145\155\56\157\165\164\56\160\162\151\156\164\154\156", "\154\145\156\147\164\150", "\156\145\167", null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "WithinComment",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7ffffffffc01L, 
};
static final long[] jjtoSkip = {
   0x3faL, 
};
static final long[] jjtoMore = {
   0x4L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[11];
private final int[] jjstateSet = new int[22];
protected char curChar;
/** Constructor. */
public AnalisadorTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AnalisadorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 11; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 1;
int defaultLexState = 1;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 2)
         {
            jjmatchedKind = 2;
         }
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
